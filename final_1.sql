/*1. Написать команды создания таблиц заданной схемы с
указанием необходимых ключей и ограничений. Все
ограничения должны быть именованными (для первичных
ключей имена должны начинаться с префикса «PK_», для
вторичного ключа – «FK_», проверки - «CH_»).
Ограничения: сумма страхового полиса не может быть
отрицательной: объём двигателя не может быть отрицательным
или больше 10000 литров; значение поля сумма не может быть
отрицательным; значение null допустимо только в поле
дата_окончания. 
*/

create table Владельцы
(
  Номер_лицензии integer not null,
  Имя varchar(100) not null,
  Фамилия varchar(100) not null,
  Отчество varchar(100) not null,
  Телефон varchar(100) not null,
  Адрес varchar(100) not null,
  constraint PK_владельцы_номер_лицензии primary key (Номер_лицензии)
);

create table Автомобили
(
  Регистрационный_номер integer not null,
  Номер_лицензии integer not null,
  Марка varchar(100) not null,
  Цвет varchar(100) not null,
  Объём_двигателя numeric(6,1) not null, 
  Дата_тех_обслуживания timestamp not null,
  Округ_регистрации varchar(100) not null,
  constraint PK_автомобили_регистр_номер primary key (Регистрационный_номер),
  constraint FK_автомобили_номер_лицензии foreign key (Номер_лицензии) references Владельцы(Номер_лицензии),
  constraint CH_автомобили_объём_двигателя check (Объём_двигателя >= 0 and Объём_двигателя <= 10000)
);

create table Страховые_компании
(
  ID_Компании integer not null,
  название varchar(100) not null,
  Адрес varchar(100) not null,
  Телефон varchar(100) not null,
  constraint PK_страховые_компании_id_компании primary key (ID_Компании)
);

create table Страховые_полисы
(
  Номер_полиса integer not null,
  ID_Компании integer not null,
  Регистрационный_номер integer not null,
  Дата_начала timestamp not null,
  Дата_окончания timestamp, 
  Тип_страхования varchar(100) not null,
  Сумма integer not null,
  constraint PK_страховые_полисы_номер_полиса primary key (Номер_полиса),
  constraint FK_страховые_полисы_id_компании foreign key (ID_Компании) references Страховые_компании(ID_Компании) on delete cascade, --закрыли компанию -> удаляются полисы
  constraint FK_страховые_полисы_регистр_номер foreign key (Регистрационный_номер) 
                              references Автомобили(Регистрационный_номер) on delete cascade, --при продаже машины информация в базе полисов должна удаляться
  constraint CH_страховые_полисы_сумма check (Сумма >= 0),
  constraint CH_страховые_полисы_время check (Дата_начала < Дата_окончания)
);


------------------------------------------
-- 2. Заполнить созданные таблицы данными, 5-10 записей для каждой таблицы.

insert into Владельцы (
  Номер_лицензии, Имя, Фамилия, Отчество, Телефон, Адрес
)
values 

(1, 'Антонова', 'Анна', 'Ивановна', '+7 980 182-94-51', 'Курская область, г. Железногорск, ул. Дубовой Рощи, дом 160, квартира 707'),
(2, 'Золотов', 'Андрей', 'Матвеевич', '+7 928 085-35-46', 'Брянская область, г. Климово, ул. Аккуратова, дом 75, квартира 996'),
(3, 'Виноградова', 'Марта', 'Ивановна', '+7 977 221-08-60','Рязанская область, г. Новомичуринск, ул. Мясницкий проезд, дом 74, квартира 547'),
(4, 'Боброва', 'Марианна', 'Романовна', '+7 973 269-65-59', 'Ростовская область, г. Благодарный, ул. Ямского Поля 3-я, дом 100, квартира 725'),
(5, 'Орлова', 'Виктория', 'Ивановна', '+7 968 507-22-64', 'Калининградская область, г. Новоколозное, ул. Ионинская, дом 185, квартира 592'),
(6, 'Волкова', 'Елизавета', 'Ильинична', '+7 944 587-09-23', 'Ивановская область, г. Фурманов, ул. Лесозавод 2-я, дом 77, квартира 53'),
(7, 'Павлов', 'Алексей', 'Алексеевич','+7 942 128-31-02', 'Тюменская область, г. Заводоуковск, ул. Динамовцев, дом 19, квартира 6'),
(8, 'Михайлов', 'Владимир', 'Андреевич',  '+7 932 438-11-13', 'Самарская область, г. Самара, ул. 1905 года, 91'),
(9, 'Губанова', 'Анастасия', 'Александровна', '+7 956 838-90-88', 'Ульяновская область, г. Чамзинка, ул. Красного Текстильщика, дом 56'),
(10, 'Столярова', 'Амелия', 'Тимофеевна','+7 982 157-20-51', 'Ленинградская область, г. Ухта, ул. Молчановка Б., дом 175, квартира 852')
;

insert into Автомобили (Регистрационный_номер, Номер_лицензии, Марка, Цвет, Объём_двигателя,
          Дата_тех_обслуживания, Округ_регистрации)
values 
(501, 1, 'Ford', 'красный', 2.8, '2021-08-13 12:32:13', 'Центральный'),
(502, 2, 'Lada', 'серый', 2.0, '2019-06-28 13:13:50', 'Центральный'),
(503, 3, 'Mercedes-Benz', 'белый', 3.5, '2020-01-10 09:51:14', 'Центральный'),
(504, 4, 'BMW', 'чёрный', 5.5, '2021-09-09 15:39:31', 'Южный'),
(505, 5, 'Opel', 'синий', 1.8, '2020-12-01 12:13:30', 'Северо-Западный'),
(506, 6, 'Huyndai', 'красный', 2.2, '2019-01-03 11:03:49', 'Центральный'),
(507, 7, 'Mazda', 'белый', 1.6, '2020-08-26 15:03:23', 'Уральский'),
(508, 8, 'Ford', 'синий', 4.4, '2021-05-13 08:30:15', 'Приволжский'),
(509, 9, 'Opel', 'чёрный', 3.2, '2021-04-27 13:09:15', 'Приволжский'),
(510, 10, 'BMW', 'фиолетовый', 2.8, '2021-11-01 09:48:12' , 'Северо-Западный')
;

insert into Страховые_компании(ID_Компании, название, Адрес, Телефон)
values 
(1, 'МАКС', 'Ивановская область, г. Иваново, пр. Текстильщиков, 32А, офис 29', '7 905 155-68-55'),
(2, 'РЕЗО', 'г. Москва, ул. Шереметьевская, дом 27, офис 270', '+7 916 142-91-67'),
(3, 'Баланс', 'Рязанская область, г.Рязань, ул.Интернациональная, дом 3', '+7 491 290-80-03'),
(4, 'ЭКО', 'Самарская область, г. Самара, ул. Урицкого, дом 19', '+7 846 341-08-89'),
(5, 'АРМЕД', 'Тюменская область, г. Тюмена, ул. Газовиков, дом 51', '+7 345 249-05-49')
;

insert into Страховые_полисы (Номер_полиса, ID_Компании,  Регистрационный_номер, Дата_начала, Дата_окончания, Тип_страхования, Сумма)
values   
(1, 2, 501, '2020-01-15 08:15:30', null, 'КАСКО', 7000),
(2, 4, 502, '2019-09-02 15:32:30', '2023-09-02 00:00:00', 'ОСАГО', 20000),
(3, 2, 503, '2021-11-09 09:31:01', '2025-11-09 23:59:59', 'КАСКО', 5000),
(4, 3, 504, '2020-08-03 13:12:11', null, 'ДСАГО', 14000),
(5, 2, 505, '2019-06-11 16:15:13', '2025-06-11 16:15:13', 'Зелёная карта', 8500),
(6, 1, 506, '2020-05-21 13:43:15', '2021-12-12 23:59:59', 'КАСКО', 8000),
(7, 3, 507, '2021-07-01 09:47:32', null, 'ОСАГО', 21000),
(8, 5, 508, '2020-12-04 11:13:31', null, 'КАСКО', 7500),
(9, 5, 509, '2021-10-29 14:54:03', '2023-10-29  00:00:00', 'Зелёная карта', 8000),
(10, 2, 510, '2019-04-01 08:24:37', '2021-05-01 00:00:00', 'ДСАГО', 9150)
;

insert into Владельцы (
  Номер_лицензии, Имя, Фамилия, Отчество, Телефон, Адрес
)
values 
(11, 'Цветущая', 'Роза', 'Васильевна','+7 382 547-10-51', 'Ленинградская область, г. Всеволжск, ул. Центральная, дом 15, квартира 3')
;
insert into Автомобили (Регистрационный_номер, Номер_лицензии, Марка, Цвет, Объём_двигателя,
          Дата_тех_обслуживания, Округ_регистрации)
values 
(511, 11, 'Ford', 'красный', 2.2, '2018-03-11 14:35:43', 'Центральный')
;
insert into Страховые_полисы (Номер_полиса, ID_Компании,  Регистрационный_номер, Дата_начала, Дата_окончания, Тип_страхования, Сумма)
values
(11, 2, 511, '2020-01-15 08:15:30', '2021-01-20 00:00:00', 'КАСКО', 3500);



insert into Владельцы (Номер_лицензии, Имя, Фамилия, Отчество, Телефон,
           Адрес)
values (12, 'Смоленов', 'Евгений', 'Борисович', '+7 973 263-45-81', 
    'Рязанская область, г.Рязань, ул. Красногорцева, дом 4');
    
insert into Автомобили (Регистрационный_номер, Номер_лицензии, Марка, Цвет, Объём_двигателя, 
           Дата_тех_обслуживания, Округ_регистрации)
values (512, 12, 'Mercedes-Benz', 'зелёный', 3.2, '2021-08-14 18:00:15', 'Южный');

insert into Страховые_компании (ID_Компании, название, Адрес, Телефон)
values
(6, 'НИКО', 'Томская область, г.Томск, пр. Фрунзе, 115', '+7 382 244-00-88');


------------------------------------------
-- 3. Написать запросы. Устранить дублирование только для тех случаев, где это потенциально возможно.

/*
3.1. Вывести номер лицензии и автомобилей марки “Ford” с
объёмом двигателя больше 2.5 литра. Результат упорядочить
по объёму двигателя
*/

select Номер_лицензии, Марка, Объём_двигателя from Автомобили
where lower(Марка) like '%ford%' and Объём_двигателя > 2.5
order by Объём_двигателя;

/*3.2. Вывести владельцев автомобилей застраховавшихся летом.
В выборке должны присутствовать только следующие поля:
ФИО автовладельца, марку машины, название страховой
компании и сумму. Результат упорядочить по ФИО */

select 
Имя || ' ' || Фамилия || ' ' || Отчество as ФИО,
Марка, название, Сумма
from Владельцы as владельцы
join Автомобили as автомобили
  on автомобили.Номер_лицензии = владельцы.Номер_лицензии
join Страховые_полисы as полисы
  on полисы.Регистрационный_номер = автомобили.Регистрационный_номер
    and extract(month from Дата_начала) in (6, 7, 8)
join Страховые_компании as компании
  on компании.ID_Компании = полисы.ID_Компании
order by ФИО;

/*
3.3. Сформировать статистику по маркам машин. В выборке
должны присутствовать следующие поля: марка машины,
число машин, средняя цена страхового полюса, средний срок
страхования для страховок ограниченного срока действия.
*/

--avg(age(Дата_окончания, Дата_начала)) для Дата_окончания != null
select Марка, count(*) as количество_марок, round(avg(Сумма)) as срд_сумма, avg(age(Дата_окончания, Дата_начала)) as срд_время_страховки
from Автомобили as автомобили
join Страховые_полисы as полисы
  on полисы.Регистрационный_номер = автомобили.Регистрационный_номер
group by Марка;


/*
3.4. Сформировать список страховых компаний, 
у которых количество действующих срочных страховок (страховок ограниченного срока действия)
превышает количество бессрочных страховок.
*/

with base as
(
  select название, sum(case when Дата_окончания is null then 1 else 0 end) as количество_бессрочных, 
  sum(case when Дата_окончания is null then 0 else 1 end) as количество_ограниченных
  from Страховые_полисы as полисы
  join Страховые_компании as компании 
    on компании.ID_Компании = полисы.ID_Компании
  group by полисы.ID_Компании, название
)
select название from base
where количество_бессрочных < количество_ограниченных


/*
3.5. Выбрать страховые полисы,
у которых сумма страховке выше средней
*/
--думаю, вывод компании был бы излишним.
select * from Страховые_полисы
where Сумма > (select avg(Сумма) from Страховые_полисы)

/*
но навсякий случай оставлю этот запрос.
select название, компании.ID_Компании, Регистрационный_номер, Номер_полиса, Тип_страхования, Сумма from Страховые_полисы as полисы
join Страховые_компании as компании
  on компании.ID_Компании = полисы.ID_Компании
where Сумма > (select avg(Сумма) from Страховые_полисы)
*/


/*
3.6. Найти автомобили, на данный момент нигде не застрахованные. 
*/

select * from  Автомобили as автомобили
where 
not exists 
(
  --нет в таблице страховок
   select 
   from Страховые_полисы as полисы
   where полисы.Регистрационный_номер = автомобили.Регистрационный_номер
) 
or exists
(
   --есть в таблице страховок, но текущее время > дата окончания
   --т.е., страховка просрочена
   select
   from Страховые_полисы as полисы
   where полисы.Регистрационный_номер = автомобили.Регистрационный_номер
      and Дата_окончания <= current_timestamp
)
--через exist'ы, по моему, читабельнее

------------------------------------------
-- 4. Написать запросы на изменение данных.
/*4.1. Увеличить страховую сумму в 1,5 раза для автомобилей с объемом двигателя более 2,5 литра */


--запрос до изменения
select Марка, Объём_двигателя, Сумма
from Автомобили
join Страховые_полисы as полисы
   on полисы.Регистрационный_номер = Автомобили.Регистрационный_номер
where Объём_двигателя > 2.5

update Страховые_полисы as полисы
set Сумма = Сумма * 1.5
where exists
(
  select 
  from Автомобили as автомобили
  where автомобили.Регистрационный_номер = полисы.Регистрационный_номер
    and автомобили.Объём_двигателя > 2.5
);

--запрос после изменения
select Марка, Объём_двигателя, Сумма
from Автомобили
join Страховые_полисы as полисы
   on полисы.Регистрационный_номер = Автомобили.Регистрационный_номер
where Объём_двигателя > 2.5


/*4.2. Удалить сведения о страховых компаниях, не пропавших ни одного страхового полюса. */

-- скорее всего, вы имели в виду продавших
-- компании, которых нет в базе страховых полисов,
-- в не зависимости имеются ли просроченные полиса (просроченные полиса -> когда-то были куплены)  

--запрос до изменения
select * from Страховые_компании as компании
where not exists
(
  select 
  from Страховые_полисы as полисы
  where полисы.ID_Компании = компании.ID_Компании
);

delete from Страховые_компании as компании
where not exists
(
  select 
  from Страховые_полисы as полисы
  where полисы.ID_Компании = компании.ID_Компании
);

--запрос после изменения
select * from Страховые_компании as компании
where not exists
(
  select 
  from Страховые_полисы as полисы
  where полисы.ID_Компании = компании.ID_Компании
);

------------------------------------------
-- 5. Создать представления.
-- 5.1. Оформить запросы 3.5 - 3.6 в виде представления.
/*
3.5. Выбрать страховые полисы,
у которых сумма страховке выше средней
*/

create view view_полиса as
select * from Страховые_полисы as полисы
where Сумма > (select avg(Сумма) from Страховые_полисы);

--пример
select 
Имя || ' ' || Фамилия || ' '  || Отчество as ФИО,
Марка, Объём_двигателя, 
название, компании.Адрес,
Тип_страхования, Сумма from view_полиса as _view  
join Страховые_компании as компании
   on компании.ID_Компании = _view.ID_Компании
join Автомобили as автомобили
   on автомобили.Регистрационный_номер = _view.Регистрационный_номер
join Владельцы as владельцы
   on владельцы.Номер_лицензии = автомобили.Номер_лицензии

/*
3.6. Найти автомобили, на данный момент нигде не застрахованные. 
*/

create view view_незастрахованные_автомобили as 
select * from  Автомобили as автомобили
where not exists 
(
  select
  from Страховые_полисы as полисы
  where полисы.Регистрационный_номер = автомобили.Регистрационный_номер
)
or exists
(
   --есть в таблице страховок, но текущее время > дата окончания
   --т.е., страховка просрочена
   select
   from Страховые_полисы as полисы
   where полисы.Регистрационный_номер = автомобили.Регистрационный_номер
      and Дата_окончания <= current_timestamp
);

--пример
select 
Имя || ' ' || Фамилия || ' ' || Отчество as ФИО,
Марка, Цвет, Объём_двигателя, Дата_тех_обслуживания
from view_незастрахованные_автомобили as _view
join Владельцы as владельцы
   on владельцы.Номер_лицензии = _view.Номер_лицензии
where Объём_двигателя > 2.8




/*
5.2. Создать представление со следующими полями: Номер лицензии, ФИО, телефон, марка машины, число дней с момента тех. осмотра, номер
действующего полюса, тип и сумма страховки. 
*/

create view view_владельцы_полиса as 
select Владельцы.Номер_лицензии, 
Имя || ' ' ||  Фамилия || ' ' || Отчество as ФИО,
Телефон, extract(day from now() - Дата_тех_обслуживания) as количество_дней,
Номер_полиса, Тип_страхования, Сумма
from Владельцы
join Автомобили as автомобили
   on автомобили.Номер_лицензии = Владельцы.Номер_лицензии
join Страховые_полисы as полисы
   on автомобили.Регистрационный_номер = полисы.Регистрационный_номер
;
--пример
select Тип_страхования, avg(количество_дней),  round(avg(Сумма)) from view_владельцы_полиса
group by Тип_страхования;

------------------------------------------
drop view view_владельцы_полиса;
drop view view_незастрахованные_автомобили;
drop view view_полиса;

